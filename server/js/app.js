// Generated by CoffeeScript 1.6.2
(function() {
  var App,
    __slice = [].slice;

  App = (function() {
    function App(frame_selector) {
      console.log('instantiation App with frame', $(frame_selector));
      this.iframe = $(frame_selector).get(0);
      window.addEventListener('message', $.proxy(this.handleFrameMessages, this));
    }

    App.prototype.handleFrameMessages = function(e) {
      var action, command, data, original, result;

      command = e.data.split(/:(.*)/);
      action = command[0];
      data = command[1] || "{}";
      data = JSON.parse(data);
      console.log('App received message', action, data);
      original = data != null ? data.original : void 0;
      result = data != null ? data.result : void 0;
      return typeof this[action] === "function" ? this[action](result, original._subscribed_event) : void 0;
    };

    App.prototype.perform = function(action, data) {
      var _this = this;

      console.log('performing', action, 'with', data);
      return this.when_window_loads(function() {
        return _this.iframe.contentWindow.postMessage("" + action + ":" + (JSON.stringify(data)), 'http://localhost:5656/iframe.html');
      });
    };

    App.prototype.login = function(data, callback) {
      var subscription_event,
        _this = this;

      subscription_event = 'login:complere';
      this.subscribe(subscription_event, function(e, data) {
        _this.unsubscribe(subscription_event, callback);
        return typeof callback === "function" ? callback(data) : void 0;
      });
      $.extend(data, {
        _callback: 'loginComplete',
        _subscribed_event: subscription_event
      });
      return this.perform('login', data);
    };

    App.prototype.loginComplete = function(data, event_to_publish) {
      if (event_to_publish != null) {
        return this.publish(event_to_publish, data);
      }
    };

    App.prototype.when_window_loads = function(callback) {
      if (document.readyState !== 'complete') {
        return window.onload = callback;
      } else {
        return typeof callback === "function" ? callback() : void 0;
      }
    };

    App.prototype.subscribe = function(event, callback) {
      console.debug('subscribing to', event);
      return $(this).on(event, callback);
    };

    App.prototype.unsubscribe = function(event, callback) {
      console.debug('dropping subscription to', event);
      return $(this).off(event, callback);
    };

    App.prototype.publish = function() {
      var data, event;

      event = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      console.log('publishing', event, 'with', data);
      return $(this).trigger(event, data);
    };

    return App;

  })();

  window.App = App;

}).call(this);
